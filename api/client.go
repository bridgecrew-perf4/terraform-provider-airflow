// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConfig request
	GetConfig(ctx context.Context) (*http.Response, error)

	// GetConnections request
	GetConnections(ctx context.Context, params *GetConnectionsParams) (*http.Response, error)

	// PostConnection request  with any body
	PostConnectionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostConnection(ctx context.Context, body PostConnectionJSONRequestBody) (*http.Response, error)

	// DeleteConnection request
	DeleteConnection(ctx context.Context, connectionId ConnectionID) (*http.Response, error)

	// GetConnection request
	GetConnection(ctx context.Context, connectionId ConnectionID) (*http.Response, error)

	// PatchConnection request  with any body
	PatchConnectionWithBody(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, contentType string, body io.Reader) (*http.Response, error)

	PatchConnection(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, body PatchConnectionJSONRequestBody) (*http.Response, error)

	// GetDagSource request
	GetDagSource(ctx context.Context, fileToken FileToken) (*http.Response, error)

	// GetDags request
	GetDags(ctx context.Context, params *GetDagsParams) (*http.Response, error)

	// GetDag request
	GetDag(ctx context.Context, dagId DAGID) (*http.Response, error)

	// PatchDag request  with any body
	PatchDagWithBody(ctx context.Context, dagId DAGID, params *PatchDagParams, contentType string, body io.Reader) (*http.Response, error)

	PatchDag(ctx context.Context, dagId DAGID, params *PatchDagParams, body PatchDagJSONRequestBody) (*http.Response, error)

	// PostClearTaskInstances request  with any body
	PostClearTaskInstancesWithBody(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*http.Response, error)

	PostClearTaskInstances(ctx context.Context, dagId DAGID, body PostClearTaskInstancesJSONRequestBody) (*http.Response, error)

	// GetDagRuns request
	GetDagRuns(ctx context.Context, dagId DAGID, params *GetDagRunsParams) (*http.Response, error)

	// PostDagRun request  with any body
	PostDagRunWithBody(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*http.Response, error)

	PostDagRun(ctx context.Context, dagId DAGID, body PostDagRunJSONRequestBody) (*http.Response, error)

	// DeleteDagRun request
	DeleteDagRun(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*http.Response, error)

	// GetDagRun request
	GetDagRun(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*http.Response, error)

	// GetTaskInstances request
	GetTaskInstances(ctx context.Context, dagId DAGID, dagRunId DAGRunID, params *GetTaskInstancesParams) (*http.Response, error)

	// GetTaskInstance request
	GetTaskInstance(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*http.Response, error)

	// GetExtraLinks request
	GetExtraLinks(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*http.Response, error)

	// GetLog request
	GetLog(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, taskTryNumber TaskTryNumber, params *GetLogParams) (*http.Response, error)

	// GetXcomEntries request
	GetXcomEntries(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, params *GetXcomEntriesParams) (*http.Response, error)

	// GetXcomEntry request
	GetXcomEntry(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, xcomKey XComKey) (*http.Response, error)

	// GetDagDetails request
	GetDagDetails(ctx context.Context, dagId DAGID) (*http.Response, error)

	// GetTasks request
	GetTasks(ctx context.Context, dagId DAGID) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, dagId DAGID, taskId TaskID) (*http.Response, error)

	// PostSetTaskInstancesState request  with any body
	PostSetTaskInstancesStateWithBody(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*http.Response, error)

	PostSetTaskInstancesState(ctx context.Context, dagId DAGID, body PostSetTaskInstancesStateJSONRequestBody) (*http.Response, error)

	// GetDagRunsBatch request  with any body
	GetDagRunsBatchWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GetDagRunsBatch(ctx context.Context, body GetDagRunsBatchJSONRequestBody) (*http.Response, error)

	// GetTaskInstancesBatch request  with any body
	GetTaskInstancesBatchWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	GetTaskInstancesBatch(ctx context.Context, body GetTaskInstancesBatchJSONRequestBody) (*http.Response, error)

	// GetEventLogs request
	GetEventLogs(ctx context.Context, params *GetEventLogsParams) (*http.Response, error)

	// GetEventLog request
	GetEventLog(ctx context.Context, eventLogId EventLogID) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context) (*http.Response, error)

	// GetImportErrors request
	GetImportErrors(ctx context.Context, params *GetImportErrorsParams) (*http.Response, error)

	// GetImportError request
	GetImportError(ctx context.Context, importErrorId ImportErrorID) (*http.Response, error)

	// GetPools request
	GetPools(ctx context.Context, params *GetPoolsParams) (*http.Response, error)

	// PostPool request  with any body
	PostPoolWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostPool(ctx context.Context, body PostPoolJSONRequestBody) (*http.Response, error)

	// DeletePool request
	DeletePool(ctx context.Context, poolName PoolName) (*http.Response, error)

	// GetPool request
	GetPool(ctx context.Context, poolName PoolName) (*http.Response, error)

	// PatchPool request  with any body
	PatchPoolWithBody(ctx context.Context, poolName PoolName, params *PatchPoolParams, contentType string, body io.Reader) (*http.Response, error)

	PatchPool(ctx context.Context, poolName PoolName, params *PatchPoolParams, body PatchPoolJSONRequestBody) (*http.Response, error)

	// GetVariables request
	GetVariables(ctx context.Context, params *GetVariablesParams) (*http.Response, error)

	// PostVariables request  with any body
	PostVariablesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostVariables(ctx context.Context, body PostVariablesJSONRequestBody) (*http.Response, error)

	// DeleteVariable request
	DeleteVariable(ctx context.Context, variableKey VariableKey) (*http.Response, error)

	// GetVariable request
	GetVariable(ctx context.Context, variableKey VariableKey) (*http.Response, error)

	// PatchVariable request  with any body
	PatchVariableWithBody(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, contentType string, body io.Reader) (*http.Response, error)

	PatchVariable(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, body PatchVariableJSONRequestBody) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context) (*http.Response, error)
}

func (c *Client) GetConfig(ctx context.Context) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnections(ctx context.Context, params *GetConnectionsParams) (*http.Response, error) {
	req, err := NewGetConnectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnection(ctx context.Context, body PostConnectionJSONRequestBody) (*http.Response, error) {
	req, err := NewPostConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnection(ctx context.Context, connectionId ConnectionID) (*http.Response, error) {
	req, err := NewDeleteConnectionRequest(c.Server, connectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnection(ctx context.Context, connectionId ConnectionID) (*http.Response, error) {
	req, err := NewGetConnectionRequest(c.Server, connectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConnectionWithBody(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchConnectionRequestWithBody(c.Server, connectionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConnection(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, body PatchConnectionJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchConnectionRequest(c.Server, connectionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDagSource(ctx context.Context, fileToken FileToken) (*http.Response, error) {
	req, err := NewGetDagSourceRequest(c.Server, fileToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDags(ctx context.Context, params *GetDagsParams) (*http.Response, error) {
	req, err := NewGetDagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDag(ctx context.Context, dagId DAGID) (*http.Response, error) {
	req, err := NewGetDagRequest(c.Server, dagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDagWithBody(ctx context.Context, dagId DAGID, params *PatchDagParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchDagRequestWithBody(c.Server, dagId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDag(ctx context.Context, dagId DAGID, params *PatchDagParams, body PatchDagJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchDagRequest(c.Server, dagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClearTaskInstancesWithBody(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostClearTaskInstancesRequestWithBody(c.Server, dagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClearTaskInstances(ctx context.Context, dagId DAGID, body PostClearTaskInstancesJSONRequestBody) (*http.Response, error) {
	req, err := NewPostClearTaskInstancesRequest(c.Server, dagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDagRuns(ctx context.Context, dagId DAGID, params *GetDagRunsParams) (*http.Response, error) {
	req, err := NewGetDagRunsRequest(c.Server, dagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostDagRunWithBody(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostDagRunRequestWithBody(c.Server, dagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostDagRun(ctx context.Context, dagId DAGID, body PostDagRunJSONRequestBody) (*http.Response, error) {
	req, err := NewPostDagRunRequest(c.Server, dagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDagRun(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*http.Response, error) {
	req, err := NewDeleteDagRunRequest(c.Server, dagId, dagRunId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDagRun(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*http.Response, error) {
	req, err := NewGetDagRunRequest(c.Server, dagId, dagRunId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskInstances(ctx context.Context, dagId DAGID, dagRunId DAGRunID, params *GetTaskInstancesParams) (*http.Response, error) {
	req, err := NewGetTaskInstancesRequest(c.Server, dagId, dagRunId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskInstance(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*http.Response, error) {
	req, err := NewGetTaskInstanceRequest(c.Server, dagId, dagRunId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtraLinks(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*http.Response, error) {
	req, err := NewGetExtraLinksRequest(c.Server, dagId, dagRunId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLog(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, taskTryNumber TaskTryNumber, params *GetLogParams) (*http.Response, error) {
	req, err := NewGetLogRequest(c.Server, dagId, dagRunId, taskId, taskTryNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetXcomEntries(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, params *GetXcomEntriesParams) (*http.Response, error) {
	req, err := NewGetXcomEntriesRequest(c.Server, dagId, dagRunId, taskId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetXcomEntry(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, xcomKey XComKey) (*http.Response, error) {
	req, err := NewGetXcomEntryRequest(c.Server, dagId, dagRunId, taskId, xcomKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDagDetails(ctx context.Context, dagId DAGID) (*http.Response, error) {
	req, err := NewGetDagDetailsRequest(c.Server, dagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasks(ctx context.Context, dagId DAGID) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, dagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, dagId DAGID, taskId TaskID) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, dagId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetTaskInstancesStateWithBody(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostSetTaskInstancesStateRequestWithBody(c.Server, dagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetTaskInstancesState(ctx context.Context, dagId DAGID, body PostSetTaskInstancesStateJSONRequestBody) (*http.Response, error) {
	req, err := NewPostSetTaskInstancesStateRequest(c.Server, dagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDagRunsBatchWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetDagRunsBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDagRunsBatch(ctx context.Context, body GetDagRunsBatchJSONRequestBody) (*http.Response, error) {
	req, err := NewGetDagRunsBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskInstancesBatchWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetTaskInstancesBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskInstancesBatch(ctx context.Context, body GetTaskInstancesBatchJSONRequestBody) (*http.Response, error) {
	req, err := NewGetTaskInstancesBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventLogs(ctx context.Context, params *GetEventLogsParams) (*http.Response, error) {
	req, err := NewGetEventLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventLog(ctx context.Context, eventLogId EventLogID) (*http.Response, error) {
	req, err := NewGetEventLogRequest(c.Server, eventLogId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetImportErrors(ctx context.Context, params *GetImportErrorsParams) (*http.Response, error) {
	req, err := NewGetImportErrorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetImportError(ctx context.Context, importErrorId ImportErrorID) (*http.Response, error) {
	req, err := NewGetImportErrorRequest(c.Server, importErrorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPools(ctx context.Context, params *GetPoolsParams) (*http.Response, error) {
	req, err := NewGetPoolsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostPoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostPool(ctx context.Context, body PostPoolJSONRequestBody) (*http.Response, error) {
	req, err := NewPostPoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePool(ctx context.Context, poolName PoolName) (*http.Response, error) {
	req, err := NewDeletePoolRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPool(ctx context.Context, poolName PoolName) (*http.Response, error) {
	req, err := NewGetPoolRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPoolWithBody(ctx context.Context, poolName PoolName, params *PatchPoolParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchPoolRequestWithBody(c.Server, poolName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPool(ctx context.Context, poolName PoolName, params *PatchPoolParams, body PatchPoolJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchPoolRequest(c.Server, poolName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVariables(ctx context.Context, params *GetVariablesParams) (*http.Response, error) {
	req, err := NewGetVariablesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostVariablesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostVariablesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostVariables(ctx context.Context, body PostVariablesJSONRequestBody) (*http.Response, error) {
	req, err := NewPostVariablesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVariable(ctx context.Context, variableKey VariableKey) (*http.Response, error) {
	req, err := NewDeleteVariableRequest(c.Server, variableKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVariable(ctx context.Context, variableKey VariableKey) (*http.Response, error) {
	req, err := NewGetVariableRequest(c.Server, variableKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVariableWithBody(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchVariableRequestWithBody(c.Server, variableKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVariable(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, body PatchVariableJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchVariableRequest(c.Server, variableKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/config")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionsRequest generates requests for GetConnections
func NewGetConnectionsRequest(server string, params *GetConnectionsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connections")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConnectionRequest calls the generic PostConnection builder with application/json body
func NewPostConnectionRequest(server string, body PostConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConnectionRequestWithBody generates requests for PostConnection with any type of body
func NewPostConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connections")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteConnectionRequest generates requests for DeleteConnection
func NewDeleteConnectionRequest(server string, connectionId ConnectionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "connection_id", connectionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionRequest generates requests for GetConnection
func NewGetConnectionRequest(server string, connectionId ConnectionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "connection_id", connectionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchConnectionRequest calls the generic PatchConnection builder with application/json body
func NewPatchConnectionRequest(server string, connectionId ConnectionID, params *PatchConnectionParams, body PatchConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConnectionRequestWithBody(server, connectionId, params, "application/json", bodyReader)
}

// NewPatchConnectionRequestWithBody generates requests for PatchConnection with any type of body
func NewPatchConnectionRequestWithBody(server string, connectionId ConnectionID, params *PatchConnectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "connection_id", connectionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.UpdateMask != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "update_mask", *params.UpdateMask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDagSourceRequest generates requests for GetDagSource
func NewGetDagSourceRequest(server string, fileToken FileToken) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "file_token", fileToken)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dagSources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDagsRequest generates requests for GetDags
func NewGetDagsRequest(server string, params *GetDagsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDagRequest generates requests for GetDag
func NewGetDagRequest(server string, dagId DAGID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchDagRequest calls the generic PatchDag builder with application/json body
func NewPatchDagRequest(server string, dagId DAGID, params *PatchDagParams, body PatchDagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDagRequestWithBody(server, dagId, params, "application/json", bodyReader)
}

// NewPatchDagRequestWithBody generates requests for PatchDag with any type of body
func NewPatchDagRequestWithBody(server string, dagId DAGID, params *PatchDagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.UpdateMask != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "update_mask", *params.UpdateMask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostClearTaskInstancesRequest calls the generic PostClearTaskInstances builder with application/json body
func NewPostClearTaskInstancesRequest(server string, dagId DAGID, body PostClearTaskInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClearTaskInstancesRequestWithBody(server, dagId, "application/json", bodyReader)
}

// NewPostClearTaskInstancesRequestWithBody generates requests for PostClearTaskInstances with any type of body
func NewPostClearTaskInstancesRequestWithBody(server string, dagId DAGID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/clearTaskInstances", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDagRunsRequest generates requests for GetDagRuns
func NewGetDagRunsRequest(server string, dagId DAGID, params *GetDagRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExecutionDateGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "execution_date_gte", *params.ExecutionDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExecutionDateLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "execution_date_lte", *params.ExecutionDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDateGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start_date_gte", *params.StartDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDateLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start_date_lte", *params.StartDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDateGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end_date_gte", *params.EndDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDateLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end_date_lte", *params.EndDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDagRunRequest calls the generic PostDagRun builder with application/json body
func NewPostDagRunRequest(server string, dagId DAGID, body PostDagRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDagRunRequestWithBody(server, dagId, "application/json", bodyReader)
}

// NewPostDagRunRequestWithBody generates requests for PostDagRun with any type of body
func NewPostDagRunRequestWithBody(server string, dagId DAGID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDagRunRequest generates requests for DeleteDagRun
func NewDeleteDagRunRequest(server string, dagId DAGID, dagRunId DAGRunID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDagRunRequest generates requests for GetDagRun
func NewGetDagRunRequest(server string, dagId DAGID, dagRunId DAGRunID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskInstancesRequest generates requests for GetTaskInstances
func NewGetTaskInstancesRequest(server string, dagId DAGID, dagRunId DAGRunID, params *GetTaskInstancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s/taskInstances", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ExecutionDateGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "execution_date_gte", *params.ExecutionDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExecutionDateLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "execution_date_lte", *params.ExecutionDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDateGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start_date_gte", *params.StartDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDateLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start_date_lte", *params.StartDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDateGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end_date_gte", *params.EndDateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDateLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end_date_lte", *params.EndDateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DurationGte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "duration_gte", *params.DurationGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DurationLte != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "duration_lte", *params.DurationLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pool != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "pool", *params.Pool); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Queue != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "queue", *params.Queue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskInstanceRequest generates requests for GetTaskInstance
func NewGetTaskInstanceRequest(server string, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "task_id", taskId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s/taskInstances/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExtraLinksRequest generates requests for GetExtraLinks
func NewGetExtraLinksRequest(server string, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "task_id", taskId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s/taskInstances/%s/links", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogRequest generates requests for GetLog
func NewGetLogRequest(server string, dagId DAGID, dagRunId DAGRunID, taskId TaskID, taskTryNumber TaskTryNumber, params *GetLogParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "task_id", taskId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParam("simple", false, "task_try_number", taskTryNumber)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s/taskInstances/%s/logs/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.FullContent != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "full_content", *params.FullContent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "token", *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetXcomEntriesRequest generates requests for GetXcomEntries
func NewGetXcomEntriesRequest(server string, dagId DAGID, dagRunId DAGRunID, taskId TaskID, params *GetXcomEntriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "task_id", taskId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s/taskInstances/%s/xcomEntries", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetXcomEntryRequest generates requests for GetXcomEntry
func NewGetXcomEntryRequest(server string, dagId DAGID, dagRunId DAGRunID, taskId TaskID, xcomKey XComKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "dag_run_id", dagRunId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "task_id", taskId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParam("simple", false, "xcom_key", xcomKey)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/dagRuns/%s/taskInstances/%s/xcomEntries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDagDetailsRequest generates requests for GetDagDetails
func NewGetDagDetailsRequest(server string, dagId DAGID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/details", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string, dagId DAGID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/tasks", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, dagId DAGID, taskId TaskID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "task_id", taskId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/tasks/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSetTaskInstancesStateRequest calls the generic PostSetTaskInstancesState builder with application/json body
func NewPostSetTaskInstancesStateRequest(server string, dagId DAGID, body PostSetTaskInstancesStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetTaskInstancesStateRequestWithBody(server, dagId, "application/json", bodyReader)
}

// NewPostSetTaskInstancesStateRequestWithBody generates requests for PostSetTaskInstancesState with any type of body
func NewPostSetTaskInstancesStateRequestWithBody(server string, dagId DAGID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dag_id", dagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/%s/updateTaskInstancesState", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDagRunsBatchRequest calls the generic GetDagRunsBatch builder with application/json body
func NewGetDagRunsBatchRequest(server string, body GetDagRunsBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDagRunsBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDagRunsBatchRequestWithBody generates requests for GetDagRunsBatch with any type of body
func NewGetDagRunsBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/~/dagRuns/list")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTaskInstancesBatchRequest calls the generic GetTaskInstancesBatch builder with application/json body
func NewGetTaskInstancesBatchRequest(server string, body GetTaskInstancesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTaskInstancesBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewGetTaskInstancesBatchRequestWithBody generates requests for GetTaskInstancesBatch with any type of body
func NewGetTaskInstancesBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dags/~/dagRuns/~/taskInstances/list")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetEventLogsRequest generates requests for GetEventLogs
func NewGetEventLogsRequest(server string, params *GetEventLogsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/eventLogs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventLogRequest generates requests for GetEventLog
func NewGetEventLogRequest(server string, eventLogId EventLogID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "event_log_id", eventLogId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/eventLogs/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/health")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetImportErrorsRequest generates requests for GetImportErrors
func NewGetImportErrorsRequest(server string, params *GetImportErrorsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/importErrors")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetImportErrorRequest generates requests for GetImportError
func NewGetImportErrorRequest(server string, importErrorId ImportErrorID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "import_error_id", importErrorId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/importErrors/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolsRequest generates requests for GetPools
func NewGetPoolsRequest(server string, params *GetPoolsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pools")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolRequest calls the generic PostPool builder with application/json body
func NewPostPoolRequest(server string, body PostPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolRequestWithBody generates requests for PostPool with any type of body
func NewPostPoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pools")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeletePoolRequest generates requests for DeletePool
func NewDeletePoolRequest(server string, poolName PoolName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "pool_name", poolName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pools/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolRequest generates requests for GetPool
func NewGetPoolRequest(server string, poolName PoolName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "pool_name", poolName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pools/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPoolRequest calls the generic PatchPool builder with application/json body
func NewPatchPoolRequest(server string, poolName PoolName, params *PatchPoolParams, body PatchPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPoolRequestWithBody(server, poolName, params, "application/json", bodyReader)
}

// NewPatchPoolRequestWithBody generates requests for PatchPool with any type of body
func NewPatchPoolRequestWithBody(server string, poolName PoolName, params *PatchPoolParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "pool_name", poolName)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pools/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.UpdateMask != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "update_mask", *params.UpdateMask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVariablesRequest generates requests for GetVariables
func NewGetVariablesRequest(server string, params *GetVariablesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/variables")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVariablesRequest calls the generic PostVariables builder with application/json body
func NewPostVariablesRequest(server string, body PostVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVariablesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVariablesRequestWithBody generates requests for PostVariables with any type of body
func NewPostVariablesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/variables")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteVariableRequest generates requests for DeleteVariable
func NewDeleteVariableRequest(server string, variableKey VariableKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "variable_key", variableKey)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/variables/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVariableRequest generates requests for GetVariable
func NewGetVariableRequest(server string, variableKey VariableKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "variable_key", variableKey)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/variables/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchVariableRequest calls the generic PatchVariable builder with application/json body
func NewPatchVariableRequest(server string, variableKey VariableKey, params *PatchVariableParams, body PatchVariableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVariableRequestWithBody(server, variableKey, params, "application/json", bodyReader)
}

// NewPatchVariableRequestWithBody generates requests for PatchVariable with any type of body
func NewPatchVariableRequestWithBody(server string, variableKey VariableKey, params *PatchVariableParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "variable_key", variableKey)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/variables/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.UpdateMask != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "update_mask", *params.UpdateMask); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/version")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConfig request
	GetConfigWithResponse(ctx context.Context) (*GetConfigResponse, error)

	// GetConnections request
	GetConnectionsWithResponse(ctx context.Context, params *GetConnectionsParams) (*GetConnectionsResponse, error)

	// PostConnection request  with any body
	PostConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionResponse, error)

	PostConnectionWithResponse(ctx context.Context, body PostConnectionJSONRequestBody) (*PostConnectionResponse, error)

	// DeleteConnection request
	DeleteConnectionWithResponse(ctx context.Context, connectionId ConnectionID) (*DeleteConnectionResponse, error)

	// GetConnection request
	GetConnectionWithResponse(ctx context.Context, connectionId ConnectionID) (*GetConnectionResponse, error)

	// PatchConnection request  with any body
	PatchConnectionWithBodyWithResponse(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, contentType string, body io.Reader) (*PatchConnectionResponse, error)

	PatchConnectionWithResponse(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, body PatchConnectionJSONRequestBody) (*PatchConnectionResponse, error)

	// GetDagSource request
	GetDagSourceWithResponse(ctx context.Context, fileToken FileToken) (*GetDagSourceResponse, error)

	// GetDags request
	GetDagsWithResponse(ctx context.Context, params *GetDagsParams) (*GetDagsResponse, error)

	// GetDag request
	GetDagWithResponse(ctx context.Context, dagId DAGID) (*GetDagResponse, error)

	// PatchDag request  with any body
	PatchDagWithBodyWithResponse(ctx context.Context, dagId DAGID, params *PatchDagParams, contentType string, body io.Reader) (*PatchDagResponse, error)

	PatchDagWithResponse(ctx context.Context, dagId DAGID, params *PatchDagParams, body PatchDagJSONRequestBody) (*PatchDagResponse, error)

	// PostClearTaskInstances request  with any body
	PostClearTaskInstancesWithBodyWithResponse(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*PostClearTaskInstancesResponse, error)

	PostClearTaskInstancesWithResponse(ctx context.Context, dagId DAGID, body PostClearTaskInstancesJSONRequestBody) (*PostClearTaskInstancesResponse, error)

	// GetDagRuns request
	GetDagRunsWithResponse(ctx context.Context, dagId DAGID, params *GetDagRunsParams) (*GetDagRunsResponse, error)

	// PostDagRun request  with any body
	PostDagRunWithBodyWithResponse(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*PostDagRunResponse, error)

	PostDagRunWithResponse(ctx context.Context, dagId DAGID, body PostDagRunJSONRequestBody) (*PostDagRunResponse, error)

	// DeleteDagRun request
	DeleteDagRunWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*DeleteDagRunResponse, error)

	// GetDagRun request
	GetDagRunWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*GetDagRunResponse, error)

	// GetTaskInstances request
	GetTaskInstancesWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, params *GetTaskInstancesParams) (*GetTaskInstancesResponse, error)

	// GetTaskInstance request
	GetTaskInstanceWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*GetTaskInstanceResponse, error)

	// GetExtraLinks request
	GetExtraLinksWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*GetExtraLinksResponse, error)

	// GetLog request
	GetLogWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, taskTryNumber TaskTryNumber, params *GetLogParams) (*GetLogResponse, error)

	// GetXcomEntries request
	GetXcomEntriesWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, params *GetXcomEntriesParams) (*GetXcomEntriesResponse, error)

	// GetXcomEntry request
	GetXcomEntryWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, xcomKey XComKey) (*GetXcomEntryResponse, error)

	// GetDagDetails request
	GetDagDetailsWithResponse(ctx context.Context, dagId DAGID) (*GetDagDetailsResponse, error)

	// GetTasks request
	GetTasksWithResponse(ctx context.Context, dagId DAGID) (*GetTasksResponse, error)

	// GetTask request
	GetTaskWithResponse(ctx context.Context, dagId DAGID, taskId TaskID) (*GetTaskResponse, error)

	// PostSetTaskInstancesState request  with any body
	PostSetTaskInstancesStateWithBodyWithResponse(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*PostSetTaskInstancesStateResponse, error)

	PostSetTaskInstancesStateWithResponse(ctx context.Context, dagId DAGID, body PostSetTaskInstancesStateJSONRequestBody) (*PostSetTaskInstancesStateResponse, error)

	// GetDagRunsBatch request  with any body
	GetDagRunsBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetDagRunsBatchResponse, error)

	GetDagRunsBatchWithResponse(ctx context.Context, body GetDagRunsBatchJSONRequestBody) (*GetDagRunsBatchResponse, error)

	// GetTaskInstancesBatch request  with any body
	GetTaskInstancesBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetTaskInstancesBatchResponse, error)

	GetTaskInstancesBatchWithResponse(ctx context.Context, body GetTaskInstancesBatchJSONRequestBody) (*GetTaskInstancesBatchResponse, error)

	// GetEventLogs request
	GetEventLogsWithResponse(ctx context.Context, params *GetEventLogsParams) (*GetEventLogsResponse, error)

	// GetEventLog request
	GetEventLogWithResponse(ctx context.Context, eventLogId EventLogID) (*GetEventLogResponse, error)

	// GetHealth request
	GetHealthWithResponse(ctx context.Context) (*GetHealthResponse, error)

	// GetImportErrors request
	GetImportErrorsWithResponse(ctx context.Context, params *GetImportErrorsParams) (*GetImportErrorsResponse, error)

	// GetImportError request
	GetImportErrorWithResponse(ctx context.Context, importErrorId ImportErrorID) (*GetImportErrorResponse, error)

	// GetPools request
	GetPoolsWithResponse(ctx context.Context, params *GetPoolsParams) (*GetPoolsResponse, error)

	// PostPool request  with any body
	PostPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolResponse, error)

	PostPoolWithResponse(ctx context.Context, body PostPoolJSONRequestBody) (*PostPoolResponse, error)

	// DeletePool request
	DeletePoolWithResponse(ctx context.Context, poolName PoolName) (*DeletePoolResponse, error)

	// GetPool request
	GetPoolWithResponse(ctx context.Context, poolName PoolName) (*GetPoolResponse, error)

	// PatchPool request  with any body
	PatchPoolWithBodyWithResponse(ctx context.Context, poolName PoolName, params *PatchPoolParams, contentType string, body io.Reader) (*PatchPoolResponse, error)

	PatchPoolWithResponse(ctx context.Context, poolName PoolName, params *PatchPoolParams, body PatchPoolJSONRequestBody) (*PatchPoolResponse, error)

	// GetVariables request
	GetVariablesWithResponse(ctx context.Context, params *GetVariablesParams) (*GetVariablesResponse, error)

	// PostVariables request  with any body
	PostVariablesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVariablesResponse, error)

	PostVariablesWithResponse(ctx context.Context, body PostVariablesJSONRequestBody) (*PostVariablesResponse, error)

	// DeleteVariable request
	DeleteVariableWithResponse(ctx context.Context, variableKey VariableKey) (*DeleteVariableResponse, error)

	// GetVariable request
	GetVariableWithResponse(ctx context.Context, variableKey VariableKey) (*GetVariableResponse, error)

	// PatchVariable request  with any body
	PatchVariableWithBodyWithResponse(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, contentType string, body io.Reader) (*PatchVariableResponse, error)

	PatchVariableWithResponse(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, body PatchVariableJSONRequestBody) (*PatchVariableResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context) (*GetVersionResponse, error)
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Config
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ConnectionCollection)
		ConnectionCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r PostConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PatchConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Content *string `json:"content,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON406 *Error
}

// Status returns HTTPResponse.Status
func (r GetDagSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/DAGCollection)
		DAGCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetDagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DAG
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetDagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DAG
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PatchDagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClearTaskInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskInstanceReferenceCollection
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostClearTaskInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClearTaskInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/DAGRunCollection)
		DAGRunCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetDagRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDagRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DAGRun
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostDagRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDagRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDagRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDagRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDagRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DAGRun
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetDagRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskInstanceCollection)
		TaskInstanceCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskInstance
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtraLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtraLinkCollection
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetExtraLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtraLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Content           *string `json:"content,omitempty"`
		ContinuationToken *string `json:"continuation_token,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetXcomEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/XComCollection)
		XComCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetXcomEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetXcomEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetXcomEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XCom
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetXcomEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetXcomEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DAGDetail
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetDagDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskCollection
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetTaskInstancesStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskInstanceReferenceCollection
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostSetTaskInstancesStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetTaskInstancesStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDagRunsBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/DAGRunCollection)
		DAGRunCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetDagRunsBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDagRunsBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskInstancesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskInstanceCollection)
		TaskInstanceCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskInstancesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskInstancesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/EventLogCollection)
		EventLogCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetEventLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventLog
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetEventLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthInfo
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImportErrorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ImportErrorCollection)
		ImportErrorCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetImportErrorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImportErrorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImportErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportError
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetImportErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImportErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/PoolCollection)
		PoolCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetPoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pool
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r PostPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pool
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pool
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PatchPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/VariableCollection)
		VariableCollection
		// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
		CollectionInfo
	}
	JSON401 *Error
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r GetVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Variable
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r PostVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Variable
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Variable
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PatchVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionInfo
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// GetConnectionsWithResponse request returning *GetConnectionsResponse
func (c *ClientWithResponses) GetConnectionsWithResponse(ctx context.Context, params *GetConnectionsParams) (*GetConnectionsResponse, error) {
	rsp, err := c.GetConnections(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionsResponse(rsp)
}

// PostConnectionWithBodyWithResponse request with arbitrary body returning *PostConnectionResponse
func (c *ClientWithResponses) PostConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionResponse, error) {
	rsp, err := c.PostConnectionWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostConnectionWithResponse(ctx context.Context, body PostConnectionJSONRequestBody) (*PostConnectionResponse, error) {
	rsp, err := c.PostConnection(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionResponse(rsp)
}

// DeleteConnectionWithResponse request returning *DeleteConnectionResponse
func (c *ClientWithResponses) DeleteConnectionWithResponse(ctx context.Context, connectionId ConnectionID) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnection(ctx, connectionId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

// GetConnectionWithResponse request returning *GetConnectionResponse
func (c *ClientWithResponses) GetConnectionWithResponse(ctx context.Context, connectionId ConnectionID) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnection(ctx, connectionId)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

// PatchConnectionWithBodyWithResponse request with arbitrary body returning *PatchConnectionResponse
func (c *ClientWithResponses) PatchConnectionWithBodyWithResponse(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, contentType string, body io.Reader) (*PatchConnectionResponse, error) {
	rsp, err := c.PatchConnectionWithBody(ctx, connectionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchConnectionResponse(rsp)
}

func (c *ClientWithResponses) PatchConnectionWithResponse(ctx context.Context, connectionId ConnectionID, params *PatchConnectionParams, body PatchConnectionJSONRequestBody) (*PatchConnectionResponse, error) {
	rsp, err := c.PatchConnection(ctx, connectionId, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchConnectionResponse(rsp)
}

// GetDagSourceWithResponse request returning *GetDagSourceResponse
func (c *ClientWithResponses) GetDagSourceWithResponse(ctx context.Context, fileToken FileToken) (*GetDagSourceResponse, error) {
	rsp, err := c.GetDagSource(ctx, fileToken)
	if err != nil {
		return nil, err
	}
	return ParseGetDagSourceResponse(rsp)
}

// GetDagsWithResponse request returning *GetDagsResponse
func (c *ClientWithResponses) GetDagsWithResponse(ctx context.Context, params *GetDagsParams) (*GetDagsResponse, error) {
	rsp, err := c.GetDags(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDagsResponse(rsp)
}

// GetDagWithResponse request returning *GetDagResponse
func (c *ClientWithResponses) GetDagWithResponse(ctx context.Context, dagId DAGID) (*GetDagResponse, error) {
	rsp, err := c.GetDag(ctx, dagId)
	if err != nil {
		return nil, err
	}
	return ParseGetDagResponse(rsp)
}

// PatchDagWithBodyWithResponse request with arbitrary body returning *PatchDagResponse
func (c *ClientWithResponses) PatchDagWithBodyWithResponse(ctx context.Context, dagId DAGID, params *PatchDagParams, contentType string, body io.Reader) (*PatchDagResponse, error) {
	rsp, err := c.PatchDagWithBody(ctx, dagId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchDagResponse(rsp)
}

func (c *ClientWithResponses) PatchDagWithResponse(ctx context.Context, dagId DAGID, params *PatchDagParams, body PatchDagJSONRequestBody) (*PatchDagResponse, error) {
	rsp, err := c.PatchDag(ctx, dagId, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchDagResponse(rsp)
}

// PostClearTaskInstancesWithBodyWithResponse request with arbitrary body returning *PostClearTaskInstancesResponse
func (c *ClientWithResponses) PostClearTaskInstancesWithBodyWithResponse(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*PostClearTaskInstancesResponse, error) {
	rsp, err := c.PostClearTaskInstancesWithBody(ctx, dagId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClearTaskInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostClearTaskInstancesWithResponse(ctx context.Context, dagId DAGID, body PostClearTaskInstancesJSONRequestBody) (*PostClearTaskInstancesResponse, error) {
	rsp, err := c.PostClearTaskInstances(ctx, dagId, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClearTaskInstancesResponse(rsp)
}

// GetDagRunsWithResponse request returning *GetDagRunsResponse
func (c *ClientWithResponses) GetDagRunsWithResponse(ctx context.Context, dagId DAGID, params *GetDagRunsParams) (*GetDagRunsResponse, error) {
	rsp, err := c.GetDagRuns(ctx, dagId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDagRunsResponse(rsp)
}

// PostDagRunWithBodyWithResponse request with arbitrary body returning *PostDagRunResponse
func (c *ClientWithResponses) PostDagRunWithBodyWithResponse(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*PostDagRunResponse, error) {
	rsp, err := c.PostDagRunWithBody(ctx, dagId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDagRunResponse(rsp)
}

func (c *ClientWithResponses) PostDagRunWithResponse(ctx context.Context, dagId DAGID, body PostDagRunJSONRequestBody) (*PostDagRunResponse, error) {
	rsp, err := c.PostDagRun(ctx, dagId, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDagRunResponse(rsp)
}

// DeleteDagRunWithResponse request returning *DeleteDagRunResponse
func (c *ClientWithResponses) DeleteDagRunWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*DeleteDagRunResponse, error) {
	rsp, err := c.DeleteDagRun(ctx, dagId, dagRunId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDagRunResponse(rsp)
}

// GetDagRunWithResponse request returning *GetDagRunResponse
func (c *ClientWithResponses) GetDagRunWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID) (*GetDagRunResponse, error) {
	rsp, err := c.GetDagRun(ctx, dagId, dagRunId)
	if err != nil {
		return nil, err
	}
	return ParseGetDagRunResponse(rsp)
}

// GetTaskInstancesWithResponse request returning *GetTaskInstancesResponse
func (c *ClientWithResponses) GetTaskInstancesWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, params *GetTaskInstancesParams) (*GetTaskInstancesResponse, error) {
	rsp, err := c.GetTaskInstances(ctx, dagId, dagRunId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskInstancesResponse(rsp)
}

// GetTaskInstanceWithResponse request returning *GetTaskInstanceResponse
func (c *ClientWithResponses) GetTaskInstanceWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*GetTaskInstanceResponse, error) {
	rsp, err := c.GetTaskInstance(ctx, dagId, dagRunId, taskId)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskInstanceResponse(rsp)
}

// GetExtraLinksWithResponse request returning *GetExtraLinksResponse
func (c *ClientWithResponses) GetExtraLinksWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID) (*GetExtraLinksResponse, error) {
	rsp, err := c.GetExtraLinks(ctx, dagId, dagRunId, taskId)
	if err != nil {
		return nil, err
	}
	return ParseGetExtraLinksResponse(rsp)
}

// GetLogWithResponse request returning *GetLogResponse
func (c *ClientWithResponses) GetLogWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, taskTryNumber TaskTryNumber, params *GetLogParams) (*GetLogResponse, error) {
	rsp, err := c.GetLog(ctx, dagId, dagRunId, taskId, taskTryNumber, params)
	if err != nil {
		return nil, err
	}
	return ParseGetLogResponse(rsp)
}

// GetXcomEntriesWithResponse request returning *GetXcomEntriesResponse
func (c *ClientWithResponses) GetXcomEntriesWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, params *GetXcomEntriesParams) (*GetXcomEntriesResponse, error) {
	rsp, err := c.GetXcomEntries(ctx, dagId, dagRunId, taskId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetXcomEntriesResponse(rsp)
}

// GetXcomEntryWithResponse request returning *GetXcomEntryResponse
func (c *ClientWithResponses) GetXcomEntryWithResponse(ctx context.Context, dagId DAGID, dagRunId DAGRunID, taskId TaskID, xcomKey XComKey) (*GetXcomEntryResponse, error) {
	rsp, err := c.GetXcomEntry(ctx, dagId, dagRunId, taskId, xcomKey)
	if err != nil {
		return nil, err
	}
	return ParseGetXcomEntryResponse(rsp)
}

// GetDagDetailsWithResponse request returning *GetDagDetailsResponse
func (c *ClientWithResponses) GetDagDetailsWithResponse(ctx context.Context, dagId DAGID) (*GetDagDetailsResponse, error) {
	rsp, err := c.GetDagDetails(ctx, dagId)
	if err != nil {
		return nil, err
	}
	return ParseGetDagDetailsResponse(rsp)
}

// GetTasksWithResponse request returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, dagId DAGID) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, dagId)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, dagId DAGID, taskId TaskID) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, dagId, taskId)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// PostSetTaskInstancesStateWithBodyWithResponse request with arbitrary body returning *PostSetTaskInstancesStateResponse
func (c *ClientWithResponses) PostSetTaskInstancesStateWithBodyWithResponse(ctx context.Context, dagId DAGID, contentType string, body io.Reader) (*PostSetTaskInstancesStateResponse, error) {
	rsp, err := c.PostSetTaskInstancesStateWithBody(ctx, dagId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSetTaskInstancesStateResponse(rsp)
}

func (c *ClientWithResponses) PostSetTaskInstancesStateWithResponse(ctx context.Context, dagId DAGID, body PostSetTaskInstancesStateJSONRequestBody) (*PostSetTaskInstancesStateResponse, error) {
	rsp, err := c.PostSetTaskInstancesState(ctx, dagId, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSetTaskInstancesStateResponse(rsp)
}

// GetDagRunsBatchWithBodyWithResponse request with arbitrary body returning *GetDagRunsBatchResponse
func (c *ClientWithResponses) GetDagRunsBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetDagRunsBatchResponse, error) {
	rsp, err := c.GetDagRunsBatchWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetDagRunsBatchResponse(rsp)
}

func (c *ClientWithResponses) GetDagRunsBatchWithResponse(ctx context.Context, body GetDagRunsBatchJSONRequestBody) (*GetDagRunsBatchResponse, error) {
	rsp, err := c.GetDagRunsBatch(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGetDagRunsBatchResponse(rsp)
}

// GetTaskInstancesBatchWithBodyWithResponse request with arbitrary body returning *GetTaskInstancesBatchResponse
func (c *ClientWithResponses) GetTaskInstancesBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*GetTaskInstancesBatchResponse, error) {
	rsp, err := c.GetTaskInstancesBatchWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskInstancesBatchResponse(rsp)
}

func (c *ClientWithResponses) GetTaskInstancesBatchWithResponse(ctx context.Context, body GetTaskInstancesBatchJSONRequestBody) (*GetTaskInstancesBatchResponse, error) {
	rsp, err := c.GetTaskInstancesBatch(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskInstancesBatchResponse(rsp)
}

// GetEventLogsWithResponse request returning *GetEventLogsResponse
func (c *ClientWithResponses) GetEventLogsWithResponse(ctx context.Context, params *GetEventLogsParams) (*GetEventLogsResponse, error) {
	rsp, err := c.GetEventLogs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEventLogsResponse(rsp)
}

// GetEventLogWithResponse request returning *GetEventLogResponse
func (c *ClientWithResponses) GetEventLogWithResponse(ctx context.Context, eventLogId EventLogID) (*GetEventLogResponse, error) {
	rsp, err := c.GetEventLog(ctx, eventLogId)
	if err != nil {
		return nil, err
	}
	return ParseGetEventLogResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetImportErrorsWithResponse request returning *GetImportErrorsResponse
func (c *ClientWithResponses) GetImportErrorsWithResponse(ctx context.Context, params *GetImportErrorsParams) (*GetImportErrorsResponse, error) {
	rsp, err := c.GetImportErrors(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetImportErrorsResponse(rsp)
}

// GetImportErrorWithResponse request returning *GetImportErrorResponse
func (c *ClientWithResponses) GetImportErrorWithResponse(ctx context.Context, importErrorId ImportErrorID) (*GetImportErrorResponse, error) {
	rsp, err := c.GetImportError(ctx, importErrorId)
	if err != nil {
		return nil, err
	}
	return ParseGetImportErrorResponse(rsp)
}

// GetPoolsWithResponse request returning *GetPoolsResponse
func (c *ClientWithResponses) GetPoolsWithResponse(ctx context.Context, params *GetPoolsParams) (*GetPoolsResponse, error) {
	rsp, err := c.GetPools(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolsResponse(rsp)
}

// PostPoolWithBodyWithResponse request with arbitrary body returning *PostPoolResponse
func (c *ClientWithResponses) PostPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolResponse, error) {
	rsp, err := c.PostPoolWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolResponse(rsp)
}

func (c *ClientWithResponses) PostPoolWithResponse(ctx context.Context, body PostPoolJSONRequestBody) (*PostPoolResponse, error) {
	rsp, err := c.PostPool(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolResponse(rsp)
}

// DeletePoolWithResponse request returning *DeletePoolResponse
func (c *ClientWithResponses) DeletePoolWithResponse(ctx context.Context, poolName PoolName) (*DeletePoolResponse, error) {
	rsp, err := c.DeletePool(ctx, poolName)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolResponse(rsp)
}

// GetPoolWithResponse request returning *GetPoolResponse
func (c *ClientWithResponses) GetPoolWithResponse(ctx context.Context, poolName PoolName) (*GetPoolResponse, error) {
	rsp, err := c.GetPool(ctx, poolName)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolResponse(rsp)
}

// PatchPoolWithBodyWithResponse request with arbitrary body returning *PatchPoolResponse
func (c *ClientWithResponses) PatchPoolWithBodyWithResponse(ctx context.Context, poolName PoolName, params *PatchPoolParams, contentType string, body io.Reader) (*PatchPoolResponse, error) {
	rsp, err := c.PatchPoolWithBody(ctx, poolName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchPoolResponse(rsp)
}

func (c *ClientWithResponses) PatchPoolWithResponse(ctx context.Context, poolName PoolName, params *PatchPoolParams, body PatchPoolJSONRequestBody) (*PatchPoolResponse, error) {
	rsp, err := c.PatchPool(ctx, poolName, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchPoolResponse(rsp)
}

// GetVariablesWithResponse request returning *GetVariablesResponse
func (c *ClientWithResponses) GetVariablesWithResponse(ctx context.Context, params *GetVariablesParams) (*GetVariablesResponse, error) {
	rsp, err := c.GetVariables(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVariablesResponse(rsp)
}

// PostVariablesWithBodyWithResponse request with arbitrary body returning *PostVariablesResponse
func (c *ClientWithResponses) PostVariablesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVariablesResponse, error) {
	rsp, err := c.PostVariablesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVariablesResponse(rsp)
}

func (c *ClientWithResponses) PostVariablesWithResponse(ctx context.Context, body PostVariablesJSONRequestBody) (*PostVariablesResponse, error) {
	rsp, err := c.PostVariables(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVariablesResponse(rsp)
}

// DeleteVariableWithResponse request returning *DeleteVariableResponse
func (c *ClientWithResponses) DeleteVariableWithResponse(ctx context.Context, variableKey VariableKey) (*DeleteVariableResponse, error) {
	rsp, err := c.DeleteVariable(ctx, variableKey)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVariableResponse(rsp)
}

// GetVariableWithResponse request returning *GetVariableResponse
func (c *ClientWithResponses) GetVariableWithResponse(ctx context.Context, variableKey VariableKey) (*GetVariableResponse, error) {
	rsp, err := c.GetVariable(ctx, variableKey)
	if err != nil {
		return nil, err
	}
	return ParseGetVariableResponse(rsp)
}

// PatchVariableWithBodyWithResponse request with arbitrary body returning *PatchVariableResponse
func (c *ClientWithResponses) PatchVariableWithBodyWithResponse(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, contentType string, body io.Reader) (*PatchVariableResponse, error) {
	rsp, err := c.PatchVariableWithBody(ctx, variableKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchVariableResponse(rsp)
}

func (c *ClientWithResponses) PatchVariableWithResponse(ctx context.Context, variableKey VariableKey, params *PatchVariableParams, body PatchVariableJSONRequestBody) (*PatchVariableResponse, error) {
	rsp, err := c.PatchVariable(ctx, variableKey, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchVariableResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Config
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetConnectionsResponse parses an HTTP response from a GetConnectionsWithResponse call
func ParseGetConnectionsResponse(rsp *http.Response) (*GetConnectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ConnectionCollection)
			ConnectionCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostConnectionResponse parses an HTTP response from a PostConnectionWithResponse call
func ParsePostConnectionResponse(rsp *http.Response) (*PostConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteConnectionResponse parses an HTTP response from a DeleteConnectionWithResponse call
func ParseDeleteConnectionResponse(rsp *http.Response) (*DeleteConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetConnectionResponse parses an HTTP response from a GetConnectionWithResponse call
func ParseGetConnectionResponse(rsp *http.Response) (*GetConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConnectionResponse parses an HTTP response from a PatchConnectionWithResponse call
func ParsePatchConnectionResponse(rsp *http.Response) (*PatchConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDagSourceResponse parses an HTTP response from a GetDagSourceWithResponse call
func ParseGetDagSourceResponse(rsp *http.Response) (*GetDagSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Content *string `json:"content,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case rsp.StatusCode == 200:
		// Content-type (plain/text) unsupported

	}

	return response, nil
}

// ParseGetDagsResponse parses an HTTP response from a GetDagsWithResponse call
func ParseGetDagsResponse(rsp *http.Response) (*GetDagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/DAGCollection)
			DAGCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetDagResponse parses an HTTP response from a GetDagWithResponse call
func ParseGetDagResponse(rsp *http.Response) (*GetDagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DAG
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchDagResponse parses an HTTP response from a PatchDagWithResponse call
func ParsePatchDagResponse(rsp *http.Response) (*PatchDagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchDagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DAG
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostClearTaskInstancesResponse parses an HTTP response from a PostClearTaskInstancesWithResponse call
func ParsePostClearTaskInstancesResponse(rsp *http.Response) (*PostClearTaskInstancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostClearTaskInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskInstanceReferenceCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDagRunsResponse parses an HTTP response from a GetDagRunsWithResponse call
func ParseGetDagRunsResponse(rsp *http.Response) (*GetDagRunsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/DAGRunCollection)
			DAGRunCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostDagRunResponse parses an HTTP response from a PostDagRunWithResponse call
func ParsePostDagRunResponse(rsp *http.Response) (*PostDagRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDagRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DAGRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteDagRunResponse parses an HTTP response from a DeleteDagRunWithResponse call
func ParseDeleteDagRunResponse(rsp *http.Response) (*DeleteDagRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDagRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDagRunResponse parses an HTTP response from a GetDagRunWithResponse call
func ParseGetDagRunResponse(rsp *http.Response) (*GetDagRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DAGRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTaskInstancesResponse parses an HTTP response from a GetTaskInstancesWithResponse call
func ParseGetTaskInstancesResponse(rsp *http.Response) (*GetTaskInstancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/TaskInstanceCollection)
			TaskInstanceCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetTaskInstanceResponse parses an HTTP response from a GetTaskInstanceWithResponse call
func ParseGetTaskInstanceResponse(rsp *http.Response) (*GetTaskInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetExtraLinksResponse parses an HTTP response from a GetExtraLinksWithResponse call
func ParseGetExtraLinksResponse(rsp *http.Response) (*GetExtraLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExtraLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtraLinkCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLogResponse parses an HTTP response from a GetLogWithResponse call
func ParseGetLogResponse(rsp *http.Response) (*GetLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Content           *string `json:"content,omitempty"`
			ContinuationToken *string `json:"continuation_token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetXcomEntriesResponse parses an HTTP response from a GetXcomEntriesWithResponse call
func ParseGetXcomEntriesResponse(rsp *http.Response) (*GetXcomEntriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetXcomEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/XComCollection)
			XComCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetXcomEntryResponse parses an HTTP response from a GetXcomEntryWithResponse call
func ParseGetXcomEntryResponse(rsp *http.Response) (*GetXcomEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetXcomEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XCom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDagDetailsResponse parses an HTTP response from a GetDagDetailsWithResponse call
func ParseGetDagDetailsResponse(rsp *http.Response) (*GetDagDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DAGDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSetTaskInstancesStateResponse parses an HTTP response from a PostSetTaskInstancesStateWithResponse call
func ParsePostSetTaskInstancesStateResponse(rsp *http.Response) (*PostSetTaskInstancesStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSetTaskInstancesStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskInstanceReferenceCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDagRunsBatchResponse parses an HTTP response from a GetDagRunsBatchWithResponse call
func ParseGetDagRunsBatchResponse(rsp *http.Response) (*GetDagRunsBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDagRunsBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/DAGRunCollection)
			DAGRunCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetTaskInstancesBatchResponse parses an HTTP response from a GetTaskInstancesBatchWithResponse call
func ParseGetTaskInstancesBatchResponse(rsp *http.Response) (*GetTaskInstancesBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskInstancesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/TaskInstanceCollection)
			TaskInstanceCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEventLogsResponse parses an HTTP response from a GetEventLogsWithResponse call
func ParseGetEventLogsResponse(rsp *http.Response) (*GetEventLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEventLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/EventLogCollection)
			EventLogCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetEventLogResponse parses an HTTP response from a GetEventLogWithResponse call
func ParseGetEventLogResponse(rsp *http.Response) (*GetEventLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEventLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetImportErrorsResponse parses an HTTP response from a GetImportErrorsWithResponse call
func ParseGetImportErrorsResponse(rsp *http.Response) (*GetImportErrorsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetImportErrorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ImportErrorCollection)
			ImportErrorCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetImportErrorResponse parses an HTTP response from a GetImportErrorWithResponse call
func ParseGetImportErrorResponse(rsp *http.Response) (*GetImportErrorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetImportErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPoolsResponse parses an HTTP response from a GetPoolsWithResponse call
func ParseGetPoolsResponse(rsp *http.Response) (*GetPoolsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/PoolCollection)
			PoolCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostPoolResponse parses an HTTP response from a PostPoolWithResponse call
func ParsePostPoolResponse(rsp *http.Response) (*PostPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeletePoolResponse parses an HTTP response from a DeletePoolWithResponse call
func ParseDeletePoolResponse(rsp *http.Response) (*DeletePoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPoolResponse parses an HTTP response from a GetPoolWithResponse call
func ParseGetPoolResponse(rsp *http.Response) (*GetPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchPoolResponse parses an HTTP response from a PatchPoolWithResponse call
func ParsePatchPoolResponse(rsp *http.Response) (*PatchPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetVariablesResponse parses an HTTP response from a GetVariablesWithResponse call
func ParseGetVariablesResponse(rsp *http.Response) (*GetVariablesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/VariableCollection)
			VariableCollection
			// Embedded struct due to allOf(#/components/schemas/CollectionInfo)
			CollectionInfo
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostVariablesResponse parses an HTTP response from a PostVariablesWithResponse call
func ParsePostVariablesResponse(rsp *http.Response) (*PostVariablesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Variable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteVariableResponse parses an HTTP response from a DeleteVariableWithResponse call
func ParseDeleteVariableResponse(rsp *http.Response) (*DeleteVariableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetVariableResponse parses an HTTP response from a GetVariableWithResponse call
func ParseGetVariableResponse(rsp *http.Response) (*GetVariableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Variable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchVariableResponse parses an HTTP response from a PatchVariableWithResponse call
func ParsePatchVariableResponse(rsp *http.Response) (*PatchVariableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Variable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
