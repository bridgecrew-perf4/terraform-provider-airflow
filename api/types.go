// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"time"
)

// ClassReference defines model for ClassReference.
type ClassReference struct {
	ClassName  *string `json:"class_name,omitempty"`
	ModulePath *string `json:"module_path,omitempty"`
}

// ClearTaskInstance defines model for ClearTaskInstance.
type ClearTaskInstance struct {

	// If set, don't actually run this operation. The response will contain a list of task instances
	// planned to be cleaned, but not modified in any way.
	DryRun *bool `json:"dry_run,omitempty"`

	// The maximum execution date to clear.
	EndDate *string `json:"end_date,omitempty"`

	// Clear tasks in the parent dag of the subdag.
	IncludeParentdag *bool `json:"include_parentdag,omitempty"`

	// Clear tasks in subdags and clear external tasks indicated by ExternalTaskMarker.
	IncludeSubdags *bool `json:"include_subdags,omitempty"`

	// Only clear failed tasks.
	OnlyFailed *bool `json:"only_failed,omitempty"`

	// Only clear running tasks.
	OnlyRunning *bool `json:"only_running,omitempty"`

	// Set state of DAG runs to RUNNING.
	ResetDagRuns *bool `json:"reset_dag_runs,omitempty"`

	// The minimum execution date to clear.
	StartDate *string `json:"start_date,omitempty"`
}

// CollectionInfo defines model for CollectionInfo.
type CollectionInfo struct {

	// Total count for all collection items.
	TotalEntries *int `json:"total_entries,omitempty"`
}

// Color defines model for Color.
type Color string

// Config defines model for Config.
type Config struct {
	Sections *[]ConfigSection `json:"sections,omitempty"`
}

// ConfigOption defines model for ConfigOption.
type ConfigOption struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ConfigSection defines model for ConfigSection.
type ConfigSection struct {
	Name    *string         `json:"name,omitempty"`
	Options *[]ConfigOption `json:"options,omitempty"`
}

// Connection defines model for Connection.
type Connection struct {
	// Embedded struct due to allOf(#/components/schemas/ConnectionCollectionItem)
	ConnectionCollectionItem
	// Embedded fields due to inline allOf schema

	// Other values that cannot be put into another field, e.g. RSA keys.
	Extra *string `json:"extra"`

	// Paasword of the connection.
	Password *string `json:"password,omitempty"`
}

// ConnectionCollection defines model for ConnectionCollection.
type ConnectionCollection struct {
	Connections *[]ConnectionCollectionItem `json:"connections,omitempty"`
}

// ConnectionCollectionItem defines model for ConnectionCollectionItem.
type ConnectionCollectionItem struct {

	// The connection type.
	ConnType *string `json:"conn_type,omitempty"`

	// The connection ID.
	ConnectionId *string `json:"connection_id,omitempty"`

	// Host of the connection.
	Host *string `json:"host"`

	// Login of the connection.
	Login *string `json:"login"`

	// Port of the connection.
	Port *int `json:"port"`

	// Schema of the connection.
	Schema *string `json:"schema"`
}

// CronExpression defines model for CronExpression.
type CronExpression struct {
	Type  string `json:"__type"`
	Value string `json:"value"`
}

// DAG defines model for DAG.
type DAG struct {

	// The ID of the DAG.
	DagId *string `json:"dag_id,omitempty"`

	// User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.
	Description *string `json:"description"`

	// The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.
	FileToken *string `json:"file_token,omitempty"`

	// The absolute path to the file.
	Fileloc *string `json:"fileloc,omitempty"`

	// Whether the DAG is paused.
	IsPaused *bool `json:"is_paused"`

	// Whether the DAG is SubDAG.
	IsSubdag *bool     `json:"is_subdag,omitempty"`
	Owners   *[]string `json:"owners,omitempty"`

	// If the DAG is SubDAG then it is the top level DAG identifier. Otherwise, nulll.
	RootDagId *string `json:"root_dag_id"`

	// Schedule interval. Defines how often DAG runs, this object gets added to your latest task instance's
	// execution_date to figure out the next schedule.
	ScheduleInterval *ScheduleInterval `json:"schedule_interval,omitempty"`

	// List of tags.
	Tags *[]Tag `json:"tags"`
}

// DAGCollection defines model for DAGCollection.
type DAGCollection struct {
	Dags *[]DAG `json:"dags,omitempty"`
}

// DAGDetail defines model for DAGDetail.
type DAGDetail struct {
	// Embedded struct due to allOf(#/components/schemas/DAG)
	DAG
	// Embedded fields due to inline allOf schema
	Catchup     *bool    `json:"catchup,omitempty"`
	Concurrency *float32 `json:"concurrency,omitempty"`

	// Time delta
	DagRunTimeout *TimeDelta `json:"dag_run_timeout,omitempty"`
	DefaultView   *string    `json:"default_view,omitempty"`
	DocMd         *string    `json:"doc_md"`
	Orientation   *string    `json:"orientation,omitempty"`
	StartDate     *time.Time `json:"start_date,omitempty"`
	Timezone      *Timezone  `json:"timezone,omitempty"`
}

// DAGRun defines model for DAGRun.
type DAGRun struct {

	// JSON object describing additional configuration parameters.
	//
	// The value of this field can be set only when creating the object. If you try to modify the
	// field of an existing object, the request fails with an BAD_REQUEST error.
	Conf  *map[string]interface{} `json:"conf,omitempty"`
	DagId string                  `json:"dag_id"`

	// Run ID.
	//
	// The value of this field can be set only when creating the object. If you try to modify the
	// field of an existing object, the request fails with an BAD_REQUEST error.
	//
	// If not provided, a value will be generated based on execution_date.
	//
	// If the specified dag_run_id is in use, the creation request fails with an ALREADY_EXISTS error.
	//
	// This together with DAG_ID are a unique key.
	DagRunId *string    `json:"dag_run_id"`
	EndDate  *time.Time `json:"end_date"`

	// The execution date. This is the time when the DAG run should be started according to the DAG definition.
	// The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.
	// This together with DAG_ID are a unique key.
	ExecutionDate   *time.Time `json:"execution_date,omitempty"`
	ExternalTrigger *bool      `json:"external_trigger,omitempty"`

	// The start time. The time when DAG run was actually created.
	StartDate *time.Time `json:"start_date,omitempty"`

	// DAG State.
	State *DagState `json:"state,omitempty"`
}

// DAGRunCollection defines model for DAGRunCollection.
type DAGRunCollection struct {
	DagRuns *[]DAGRun `json:"dag_runs,omitempty"`
}

// DagState defines model for DagState.
type DagState string

// List of DagState
const (
	DagState_failed  DagState = "failed"
	DagState_running DagState = "running"
	DagState_success DagState = "success"
)

// Error defines model for Error.
type Error struct {

	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// A URI reference that identifies the specific occurrence of the problem. It may or may
	// not yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// The HTTP status code generated by the API server for this occurrence of the problem.
	Status float32 `json:"status"`

	// A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// A URI reference [RFC3986] that identifies the problem type. This specification
	// encourages that, when dereferenced, it provide human-readable documentation for
	// the problem type.
	Type string `json:"type"`
}

// EventLog defines model for EventLog.
type EventLog struct {

	// The DAG ID
	DagId *string `json:"dag_id,omitempty"`

	// A key describing the type of event.
	Event *string `json:"event,omitempty"`

	// The evnet log ID
	EventLogId *int `json:"event_log_id,omitempty"`

	// When the event was dispatched for an object having execution_date, the value of this field.
	ExecutionDate *time.Time `json:"execution_date,omitempty"`

	// Other information that was not included in the other fields, e.g. the complete CLI command.
	Extra *string `json:"extra"`

	// Name of the user who triggered these events a.
	Owner *string `json:"owner,omitempty"`

	// The DAG ID
	TaskId *string `json:"task_id,omitempty"`

	// The time when these events happened.
	When *time.Time `json:"when,omitempty"`
}

// EventLogCollection defines model for EventLogCollection.
type EventLogCollection struct {
	EventLogs *[]EventLog `json:"event_logs,omitempty"`
}

// ExtraLink defines model for ExtraLink.
type ExtraLink struct {

	// Class reference
	ClassRef *ClassReference `json:"class_ref,omitempty"`
	Href     *string         `json:"href,omitempty"`
	Name     *string         `json:"name,omitempty"`
}

// ExtraLinkCollection defines model for ExtraLinkCollection.
type ExtraLinkCollection struct {
	ExtraLinks *[]ExtraLink `json:"extra_links,omitempty"`
}

// HealthInfo defines model for HealthInfo.
type HealthInfo struct {

	// The status of the metadatabase.
	Metadatabase *MetadatabaseStatus `json:"metadatabase,omitempty"`

	// The status and the latest scheduler heartbeat.
	Scheduler *SchedulerStatus `json:"scheduler,omitempty"`
}

// HealthStatus defines model for HealthStatus.
type HealthStatus string

// List of HealthStatus
const (
	HealthStatus_healthy   HealthStatus = "healthy"
	HealthStatus_unhealthy HealthStatus = "unhealthy"
)

// ImportError defines model for ImportError.
type ImportError struct {

	// The filename
	Filename *string `json:"filename,omitempty"`

	// The import error ID.
	ImportErrorId *int `json:"import_error_id,omitempty"`

	// The full stackstrace..
	StackTrace *string `json:"stack_trace,omitempty"`

	// The time when this error was created.
	Timestamp *string `json:"timestamp,omitempty"`
}

// ImportErrorCollection defines model for ImportErrorCollection.
type ImportErrorCollection struct {
	ImportErrors *[]ImportError `json:"import_errors,omitempty"`
}

// ListDagRunsForm defines model for ListDagRunsForm.
type ListDagRunsForm struct {

	// Return objects with specific DAG IDs.
	// The value can be repeated to retrieve multiple matching values (OR condition).
	DagIds *[]string `json:"dag_ids,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with end_date_lte parameter to receive only the selected period.
	EndDateGte *time.Time `json:"end_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with end_date_gte parameter to receive only the selected period.
	EndDateLte *time.Time `json:"end_date_lte,omitempty"`

	// Returns objects greater or equal to the specified date.
	//
	// This can be combined with execution_date_lte key to receive only the selected period.
	ExecutionDateGte *time.Time `json:"execution_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with execution_date_gte key to receive only the selected period.
	ExecutionDateLte *time.Time `json:"execution_date_lte,omitempty"`

	// The numbers of items to return.
	PageLimit *int `json:"page_limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	PageOffset *int `json:"page_offset,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte key to receive only the selected period.
	StartDateGte *time.Time `json:"start_date_gte,omitempty"`

	// Returns objects less or equal the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period
	StartDateLte *time.Time `json:"start_date_lte,omitempty"`
}

// ListTaskInstanceForm defines model for ListTaskInstanceForm.
type ListTaskInstanceForm struct {

	// Return objects with specific DAG IDs.
	// The value can be repeated to retrieve multiple matching values (OR condition).
	DagIds *[]string `json:"dag_ids,omitempty"`

	// Returns objects greater than or equal to the specified values.
	//
	// This can be combined with duration_lte parameter to receive only the selected period.
	DurationGte *float32 `json:"duration_gte,omitempty"`

	// Returns objects less than or equal to the specified values.
	//
	// This can be combined with duration_gte parameter to receive only the selected range.
	DurationLte *float32 `json:"duration_lte,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte parameter to receive only the selected period.
	EndDateGte *time.Time `json:"end_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period.
	EndDateLte *time.Time `json:"end_date_lte,omitempty"`

	// Returns objects greater or equal to the specified date.
	//
	// This can be combined with execution_date_lte parameter to receive only the selected period.
	ExecutionDateGte *time.Time `json:"execution_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with execution_date_gte parameter to receive only the selected period.
	ExecutionDateLte *time.Time `json:"execution_date_lte,omitempty"`

	// The value can be repeated to retrieve multiple matching values (OR condition).
	Pool *[]string `json:"pool,omitempty"`

	// The value can be repeated to retrieve multiple matching values (OR condition).
	Queue *[]string `json:"queue,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte parameter to receive only the selected period.
	StartDateGte *time.Time `json:"start_date_gte,omitempty"`

	// Returns objects less or equal the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period.
	StartDateLte *time.Time `json:"start_date_lte,omitempty"`

	// The value can be repeated to retrieve multiple matching values (OR condition).
	State *[]string `json:"state,omitempty"`
}

// MetadatabaseStatus defines model for MetadatabaseStatus.
type MetadatabaseStatus struct {

	// Health status
	Status *HealthStatus `json:"status,omitempty"`
}

// Pool defines model for Pool.
type Pool struct {

	// The name of pool.
	Name *string `json:"name,omitempty"`

	// The number of slots used by running/queued tasks at the moment.
	OccupiedSlots *int `json:"occupied_slots,omitempty"`

	// The number of free slots at the moment.
	OpenSlots *int `json:"open_slots,omitempty"`

	// The number of slots used by queued tasks at the moment.
	QueuedSlots *int `json:"queued_slots,omitempty"`

	// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
	Slots *int `json:"slots,omitempty"`

	// The number of slots used by running tasks at the moment.
	UsedSlots *int `json:"used_slots,omitempty"`
}

// PoolCollection defines model for PoolCollection.
type PoolCollection struct {
	Pools *[]Pool `json:"pools,omitempty"`
}

// RelativeDelta defines model for RelativeDelta.
type RelativeDelta struct {
	Type         string `json:"__type"`
	Day          int    `json:"day"`
	Days         int    `json:"days"`
	Hour         int    `json:"hour"`
	Hours        int    `json:"hours"`
	Leapdays     int    `json:"leapdays"`
	Microsecond  int    `json:"microsecond"`
	Microseconds int    `json:"microseconds"`
	Minute       int    `json:"minute"`
	Minutes      int    `json:"minutes"`
	Month        int    `json:"month"`
	Months       int    `json:"months"`
	Second       int    `json:"second"`
	Seconds      int    `json:"seconds"`
	Year         int    `json:"year"`
	Years        int    `json:"years"`
}

// SLAMiss defines model for SLAMiss.
type SLAMiss struct {

	// The DAG ID.
	DagId            *string `json:"dag_id,omitempty"`
	Description      *string `json:"description"`
	EmailSent        *bool   `json:"email_sent,omitempty"`
	ExecutionDate    *string `json:"execution_date,omitempty"`
	NotificationSent *bool   `json:"notification_sent,omitempty"`

	// The task ID.
	TaskId    *string `json:"task_id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// ScheduleInterval defines model for ScheduleInterval.
type ScheduleInterval interface{}

// SchedulerStatus defines model for SchedulerStatus.
type SchedulerStatus struct {

	// The time the scheduler last do a heartbeat.
	LatestSchedulerHeartbeat *string `json:"latest_scheduler_heartbeat"`

	// Health status
	Status *HealthStatus `json:"status,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	Name *string `json:"name,omitempty"`
}

// Task defines model for Task.
type Task struct {

	// Class reference
	ClassRef          *ClassReference `json:"class_ref,omitempty"`
	DependsOnPast     *bool           `json:"depends_on_past,omitempty"`
	DownstreamTaskIds *[]string       `json:"downstream_task_ids,omitempty"`
	EndDate           *time.Time      `json:"end_date"`

	// Time delta
	ExecutionTimeout *TimeDelta `json:"execution_timeout,omitempty"`
	ExtraLinks       *[]struct {

		// Class reference
		ClassRef *ClassReference `json:"class_ref,omitempty"`
	} `json:"extra_links,omitempty"`
	Owner          *string  `json:"owner,omitempty"`
	Pool           *string  `json:"pool,omitempty"`
	PoolSlots      *float32 `json:"pool_slots,omitempty"`
	PriorityWeight *float32 `json:"priority_weight,omitempty"`
	Queue          *string  `json:"queue,omitempty"`
	Retries        *float32 `json:"retries,omitempty"`

	// Time delta
	RetryDelay              *TimeDelta `json:"retry_delay,omitempty"`
	RetryExponentialBackoff *bool      `json:"retry_exponential_backoff,omitempty"`
	StartDate               *time.Time `json:"start_date,omitempty"`

	// DAG
	SubDag         *DAG      `json:"sub_dag,omitempty"`
	TaskId         *string   `json:"task_id,omitempty"`
	TemplateFields *[]string `json:"template_fields,omitempty"`

	// Trigger rule.
	TriggerRule *TriggerRule `json:"trigger_rule,omitempty"`

	// Color in hexadecimal notation.
	UiColor *Color `json:"ui_color,omitempty"`

	// Color in hexadecimal notation.
	UiFgcolor         *Color `json:"ui_fgcolor,omitempty"`
	WaitForDownstream *bool  `json:"wait_for_downstream,omitempty"`

	// Weight rule.
	WeightRule *WeightRule `json:"weight_rule,omitempty"`
}

// TaskCollection defines model for TaskCollection.
type TaskCollection struct {
	Tasks *[]Task `json:"tasks,omitempty"`
}

// TaskInstance defines model for TaskInstance.
type TaskInstance struct {
	DagId          *string  `json:"dag_id,omitempty"`
	Duration       *float32 `json:"duration"`
	EndDate        *string  `json:"end_date,omitempty"`
	ExecutionDate  *string  `json:"execution_date,omitempty"`
	ExecutorConfig *string  `json:"executor_config,omitempty"`
	Hostname       *string  `json:"hostname,omitempty"`
	MaxTries       *int     `json:"max_tries,omitempty"`
	Operator       *string  `json:"operator,omitempty"`
	Pid            *int     `json:"pid"`
	Pool           *string  `json:"pool,omitempty"`
	PoolSlots      *int     `json:"pool_slots,omitempty"`
	PriorityWeight *int     `json:"priority_weight,omitempty"`
	Queue          *string  `json:"queue,omitempty"`
	QueuedWhen     *string  `json:"queued_when"`
	SlaMiss        *SLAMiss `json:"sla_miss,omitempty"`
	StartDate      *string  `json:"start_date,omitempty"`

	// Task state.
	State     *TaskState `json:"state,omitempty"`
	TaskId    *string    `json:"task_id,omitempty"`
	TryNumber *int       `json:"try_number,omitempty"`
	Unixname  *string    `json:"unixname,omitempty"`
}

// TaskInstanceCollection defines model for TaskInstanceCollection.
type TaskInstanceCollection struct {
	TaskInstances *[]TaskInstance `json:"task_instances,omitempty"`
}

// TaskInstanceReference defines model for TaskInstanceReference.
type TaskInstanceReference struct {

	// The DAG ID.
	DagId *string `json:"dag_id,omitempty"`

	// The DAG run ID.
	DagRunId      *string `json:"dag_run_id,omitempty"`
	ExecutionDate *string `json:"execution_date,omitempty"`

	// The task ID.
	TaskId *string `json:"task_id,omitempty"`
}

// TaskInstanceReferenceCollection defines model for TaskInstanceReferenceCollection.
type TaskInstanceReferenceCollection struct {
	TaskInstances *[]TaskInstanceReference `json:"task_instances,omitempty"`
}

// TaskState defines model for TaskState.
type TaskState string

// List of TaskState
const (
	TaskState_failed            TaskState = "failed"
	TaskState_none              TaskState = "none"
	TaskState_queued            TaskState = "queued"
	TaskState_running           TaskState = "running"
	TaskState_scheduled         TaskState = "scheduled"
	TaskState_skipped           TaskState = "skipped"
	TaskState_success           TaskState = "success"
	TaskState_up_for_reschedule TaskState = "up_for_reschedule"
	TaskState_up_for_retry      TaskState = "up_for_retry"
	TaskState_upstream_failed   TaskState = "upstream_failed"
)

// TimeDelta defines model for TimeDelta.
type TimeDelta struct {
	Type         string `json:"__type"`
	Days         int    `json:"days"`
	Microseconds int    `json:"microseconds"`
	Seconds      int    `json:"seconds"`
}

// Timezone defines model for Timezone.
type Timezone string

// TriggerRule defines model for TriggerRule.
type TriggerRule string

// List of TriggerRule
const (
	TriggerRule_all_done               TriggerRule = "all_done"
	TriggerRule_all_failed             TriggerRule = "all_failed"
	TriggerRule_all_success            TriggerRule = "all_success"
	TriggerRule_dummy                  TriggerRule = "dummy"
	TriggerRule_none_failed            TriggerRule = "none_failed"
	TriggerRule_none_failed_or_skipped TriggerRule = "none_failed_or_skipped"
	TriggerRule_none_skipped           TriggerRule = "none_skipped"
	TriggerRule_one_failed             TriggerRule = "one_failed"
	TriggerRule_one_success            TriggerRule = "one_success"
)

// UpdateTaskInstancesState defines model for UpdateTaskInstancesState.
type UpdateTaskInstancesState struct {

	// If set, don't actually run this operation. The response will contain a list of task instances
	// planned to be affected, but won't be modified in any way.
	DryRun *bool `json:"dry_run,omitempty"`

	// The execution date.
	ExecutionDate *string `json:"execution_date,omitempty"`

	// If set to true, downstream tasks are also affected.
	IncludeDownstream *bool `json:"include_downstream,omitempty"`

	// If set to True, also tasks from future DAG Runs are affected.
	IncludeFuture *bool `json:"include_future,omitempty"`

	// If set to True, also tasks from past DAG Runs are affected.
	IncludePast *bool `json:"include_past,omitempty"`

	// If set to true, upstream tasks are also affected.
	IncludeUpstream *bool `json:"include_upstream,omitempty"`

	// Expected new state.
	NewState *string `json:"new_state,omitempty"`

	// The task ID.
	TaskId *string `json:"task_id,omitempty"`
}

// Variable defines model for Variable.
type Variable struct {
	// Embedded struct due to allOf(#/components/schemas/VariableCollectionItem)
	VariableCollectionItem
	// Embedded fields due to inline allOf schema
	Value *string `json:"value,omitempty"`
}

// VariableCollection defines model for VariableCollection.
type VariableCollection struct {
	Variables *[]VariableCollectionItem `json:"variables,omitempty"`
}

// VariableCollectionItem defines model for VariableCollectionItem.
type VariableCollectionItem struct {
	Key *string `json:"key,omitempty"`
}

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {

	// The git version (including git commit hash)
	GitVersion *string `json:"git_version"`

	// The version of Airflow
	Version *string `json:"version,omitempty"`
}

// WeightRule defines model for WeightRule.
type WeightRule string

// List of WeightRule
const (
	WeightRule_absolute   WeightRule = "absolute"
	WeightRule_downstream WeightRule = "downstream"
	WeightRule_upstream   WeightRule = "upstream"
)

// XCom defines model for XCom.
type XCom struct {
	// Embedded struct due to allOf(#/components/schemas/XComCollectionItem)
	XComCollectionItem
	// Embedded fields due to inline allOf schema

	// The value
	Value *string `json:"value,omitempty"`
}

// XComCollection defines model for XComCollection.
type XComCollection struct {
	XcomEntries *[]XComCollectionItem `json:"xcom_entries,omitempty"`
}

// XComCollectionItem defines model for XComCollectionItem.
type XComCollectionItem struct {
	DagId         *string `json:"dag_id,omitempty"`
	ExecutionDate *string `json:"execution_date,omitempty"`
	Key           *string `json:"key,omitempty"`
	TaskId        *string `json:"task_id,omitempty"`
	Timestamp     *string `json:"timestamp,omitempty"`
}

// ConnectionID defines model for ConnectionID.
type ConnectionID string

// ContinuationToken defines model for ContinuationToken.
type ContinuationToken string

// DAGID defines model for DAGID.
type DAGID string

// DAGRunID defines model for DAGRunID.
type DAGRunID string

// EventLogID defines model for EventLogID.
type EventLogID int

// FileToken defines model for FileToken.
type FileToken string

// FilterDurationGTE defines model for FilterDurationGTE.
type FilterDurationGTE float32

// FilterDurationLTE defines model for FilterDurationLTE.
type FilterDurationLTE float32

// FilterEndDateGTE defines model for FilterEndDateGTE.
type FilterEndDateGTE time.Time

// FilterEndDateLTE defines model for FilterEndDateLTE.
type FilterEndDateLTE time.Time

// FilterExecutionDateGTE defines model for FilterExecutionDateGTE.
type FilterExecutionDateGTE time.Time

// FilterExecutionDateLTE defines model for FilterExecutionDateLTE.
type FilterExecutionDateLTE time.Time

// FilterPool defines model for FilterPool.
type FilterPool []string

// FilterQueue defines model for FilterQueue.
type FilterQueue []string

// FilterStartDateGTE defines model for FilterStartDateGTE.
type FilterStartDateGTE time.Time

// FilterStartDateLTE defines model for FilterStartDateLTE.
type FilterStartDateLTE time.Time

// FilterState defines model for FilterState.
type FilterState []string

// FullContent defines model for FullContent.
type FullContent bool

// ImportErrorID defines model for ImportErrorID.
type ImportErrorID int

// PageLimit defines model for PageLimit.
type PageLimit int

// PageOffset defines model for PageOffset.
type PageOffset int

// PoolName defines model for PoolName.
type PoolName string

// TaskID defines model for TaskID.
type TaskID string

// TaskTryNumber defines model for TaskTryNumber.
type TaskTryNumber int

// UpdateMask defines model for UpdateMask.
type UpdateMask []string

// VariableKey defines model for VariableKey.
type VariableKey string

// XComKey defines model for XComKey.
type XComKey string

// AlreadyExists defines model for AlreadyExists.
type AlreadyExists Error

// BadRequest defines model for BadRequest.
type BadRequest Error

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable Error

// NotFound defines model for NotFound.
type NotFound Error

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied Error

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated Error

// GetConnectionsParams defines parameters for GetConnections.
type GetConnectionsParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// PostConnectionJSONBody defines parameters for PostConnection.
type PostConnectionJSONBody Connection

// PatchConnectionJSONBody defines parameters for PatchConnection.
type PatchConnectionJSONBody Connection

// PatchConnectionParams defines parameters for PatchConnection.
type PatchConnectionParams struct {

	// The fields to update on the connection (connection, pool etc). If absent or empty, all
	// modifiable fields are updated. A comma-separated list of fully qualified names of fields.
	UpdateMask *UpdateMask `json:"update_mask,omitempty"`
}

// GetDagsParams defines parameters for GetDags.
type GetDagsParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// PatchDagJSONBody defines parameters for PatchDag.
type PatchDagJSONBody DAG

// PatchDagParams defines parameters for PatchDag.
type PatchDagParams struct {

	// The fields to update on the connection (connection, pool etc). If absent or empty, all
	// modifiable fields are updated. A comma-separated list of fully qualified names of fields.
	UpdateMask *UpdateMask `json:"update_mask,omitempty"`
}

// PostClearTaskInstancesJSONBody defines parameters for PostClearTaskInstances.
type PostClearTaskInstancesJSONBody ClearTaskInstance

// GetDagRunsParams defines parameters for GetDagRuns.
type GetDagRunsParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`

	// Returns objects greater or equal to the specified date.
	//
	// This can be combined with execution_date_lte parameter to receive only the selected period.
	ExecutionDateGte *FilterExecutionDateGTE `json:"execution_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with execution_date_gte parameter to receive only the selected period.
	ExecutionDateLte *FilterExecutionDateLTE `json:"execution_date_lte,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte parameter to receive only the selected period.
	StartDateGte *FilterStartDateGTE `json:"start_date_gte,omitempty"`

	// Returns objects less or equal the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period.
	StartDateLte *FilterStartDateLTE `json:"start_date_lte,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte parameter to receive only the selected period.
	EndDateGte *FilterEndDateGTE `json:"end_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period.
	EndDateLte *FilterEndDateLTE `json:"end_date_lte,omitempty"`
}

// PostDagRunJSONBody defines parameters for PostDagRun.
type PostDagRunJSONBody DAGRun

// GetTaskInstancesParams defines parameters for GetTaskInstances.
type GetTaskInstancesParams struct {

	// Returns objects greater or equal to the specified date.
	//
	// This can be combined with execution_date_lte parameter to receive only the selected period.
	ExecutionDateGte *FilterExecutionDateGTE `json:"execution_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with execution_date_gte parameter to receive only the selected period.
	ExecutionDateLte *FilterExecutionDateLTE `json:"execution_date_lte,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte parameter to receive only the selected period.
	StartDateGte *FilterStartDateGTE `json:"start_date_gte,omitempty"`

	// Returns objects less or equal the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period.
	StartDateLte *FilterStartDateLTE `json:"start_date_lte,omitempty"`

	// Returns objects greater or equal the specified date.
	//
	// This can be combined with start_date_lte parameter to receive only the selected period.
	EndDateGte *FilterEndDateGTE `json:"end_date_gte,omitempty"`

	// Returns objects less than or equal to the specified date.
	//
	// This can be combined with start_date_gte parameter to receive only the selected period.
	EndDateLte *FilterEndDateLTE `json:"end_date_lte,omitempty"`

	// Returns objects greater than or equal to the specified values.
	//
	// This can be combined with duration_lte parameter to receive only the selected period.
	DurationGte *FilterDurationGTE `json:"duration_gte,omitempty"`

	// Returns objects less than or equal to the specified values.
	//
	// This can be combined with duration_gte parameter to receive only the selected range.
	DurationLte *FilterDurationLTE `json:"duration_lte,omitempty"`

	// The value can be repeated to retrieve multiple matching values (OR condition).
	State *FilterState `json:"state,omitempty"`

	// The value can be repeated to retrieve multiple matching values (OR condition).
	Pool *FilterPool `json:"pool,omitempty"`

	// The value can be repeated to retrieve multiple matching values (OR condition).
	Queue *FilterQueue `json:"queue,omitempty"`

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// GetLogParams defines parameters for GetLog.
type GetLogParams struct {

	// A full content will be returned.
	// By default, only the first fragment will be returned.
	FullContent *FullContent `json:"full_content,omitempty"`

	// A token that allows you to continue fetching logs.
	// If passed, it will specify the location from which the download should be continued.
	Token *ContinuationToken `json:"token,omitempty"`
}

// GetXcomEntriesParams defines parameters for GetXcomEntries.
type GetXcomEntriesParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// PostSetTaskInstancesStateJSONBody defines parameters for PostSetTaskInstancesState.
type PostSetTaskInstancesStateJSONBody UpdateTaskInstancesState

// GetDagRunsBatchJSONBody defines parameters for GetDagRunsBatch.
type GetDagRunsBatchJSONBody ListDagRunsForm

// GetTaskInstancesBatchJSONBody defines parameters for GetTaskInstancesBatch.
type GetTaskInstancesBatchJSONBody ListTaskInstanceForm

// GetEventLogsParams defines parameters for GetEventLogs.
type GetEventLogsParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// GetImportErrorsParams defines parameters for GetImportErrors.
type GetImportErrorsParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// PostPoolJSONBody defines parameters for PostPool.
type PostPoolJSONBody Pool

// PatchPoolJSONBody defines parameters for PatchPool.
type PatchPoolJSONBody Pool

// PatchPoolParams defines parameters for PatchPool.
type PatchPoolParams struct {

	// The fields to update on the connection (connection, pool etc). If absent or empty, all
	// modifiable fields are updated. A comma-separated list of fully qualified names of fields.
	UpdateMask *UpdateMask `json:"update_mask,omitempty"`
}

// GetVariablesParams defines parameters for GetVariables.
type GetVariablesParams struct {

	// The numbers of items to return.
	Limit *PageLimit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *PageOffset `json:"offset,omitempty"`
}

// PostVariablesJSONBody defines parameters for PostVariables.
type PostVariablesJSONBody Variable

// PatchVariableJSONBody defines parameters for PatchVariable.
type PatchVariableJSONBody Variable

// PatchVariableParams defines parameters for PatchVariable.
type PatchVariableParams struct {

	// The fields to update on the connection (connection, pool etc). If absent or empty, all
	// modifiable fields are updated. A comma-separated list of fully qualified names of fields.
	UpdateMask *UpdateMask `json:"update_mask,omitempty"`
}

// PostConnectionRequestBody defines body for PostConnection for application/json ContentType.
type PostConnectionJSONRequestBody PostConnectionJSONBody

// PatchConnectionRequestBody defines body for PatchConnection for application/json ContentType.
type PatchConnectionJSONRequestBody PatchConnectionJSONBody

// PatchDagRequestBody defines body for PatchDag for application/json ContentType.
type PatchDagJSONRequestBody PatchDagJSONBody

// PostClearTaskInstancesRequestBody defines body for PostClearTaskInstances for application/json ContentType.
type PostClearTaskInstancesJSONRequestBody PostClearTaskInstancesJSONBody

// PostDagRunRequestBody defines body for PostDagRun for application/json ContentType.
type PostDagRunJSONRequestBody PostDagRunJSONBody

// PostSetTaskInstancesStateRequestBody defines body for PostSetTaskInstancesState for application/json ContentType.
type PostSetTaskInstancesStateJSONRequestBody PostSetTaskInstancesStateJSONBody

// GetDagRunsBatchRequestBody defines body for GetDagRunsBatch for application/json ContentType.
type GetDagRunsBatchJSONRequestBody GetDagRunsBatchJSONBody

// GetTaskInstancesBatchRequestBody defines body for GetTaskInstancesBatch for application/json ContentType.
type GetTaskInstancesBatchJSONRequestBody GetTaskInstancesBatchJSONBody

// PostPoolRequestBody defines body for PostPool for application/json ContentType.
type PostPoolJSONRequestBody PostPoolJSONBody

// PatchPoolRequestBody defines body for PatchPool for application/json ContentType.
type PatchPoolJSONRequestBody PatchPoolJSONBody

// PostVariablesRequestBody defines body for PostVariables for application/json ContentType.
type PostVariablesJSONRequestBody PostVariablesJSONBody

// PatchVariableRequestBody defines body for PatchVariable for application/json ContentType.
type PatchVariableJSONRequestBody PatchVariableJSONBody
